------------------------

START ONOS
sudo docker start onos


INGRESAR A LA INTERFAZ DE ONOS
ssh -p 8101 karaf@172.17.0.2
passowrd: karaf
aplicaciÃ³n: httpDdosDetector
log:tail httpDdosDetector

------------------------


NETWORK DEPLOYMENT RUN MININET

cd Downloads/D-ITG-2.../D-ITG-2.../bin
sudo mn --custom customTopoTestbed.py --topo mytopo --controller=remote,ip=172.17.0.2 --switch ovs,protocols=OpenFlow13

ACCEDER A INTERFAZ EN NAVEGADOR:
localhost:8181/onos/ui/#/topo2
usuario: onos
passw: rocks
comando mininet:
pingall

abrir host mininet:
xterm h1

cuando se esta en el nodo de la victima:
iniciar server
python -m SimpleHTTPServer 80

trafico normal
h4,h10
10 envia, 4 recibe
en 4: ./ITGRecv
en 10: python3 NormalTrafficGenerator.py



ataque slow en un nodo 7:
slowhttptest -c 3000 -H -g -o my_header_stats -i 10 -r 200 -t GET -u http://10.0.0.1/ -x 24 -p 3

slowhttptest -c 1000 -H -g -o my_header_stats -i 10 -r 100 -t GET -u http://10.0.0.1/ -x 24 -p 3


//probar 10 y 20
slowhttptest -c 50 -X -g -o my_header_stats -i 10 -r 10 -t GET -u http://10.0.0.1/ -x 24 -p 3

install onos
>> sudo docker pull onosproject/onos:2.6.0
>> sudo docker run -t -d -p 8181:8181 -p 8101:8101 -p 5005:5005 -p 830:830 --name onos onosproject/onos:2.6.0

onos version 
ssh -p 8101 karaf@172.17.0.2
>>summary



-H slow header
-r rate 200 por segundo
-c conexiones 3000

una vez cambiado el ip del httpdetectos:
sudo mvn clean install
PATH=$PATH:/onos-admin-1.12.1-SNAPSHOT
onos-app 172.17.0.2 reinstall! target/httpddosdetector-1.0-SNAPSHOT.oar
onos-app 172.17.0.2 reinstall! target/intentBasedNetworking-1.0-SNAPSHOT.oar



FLOW COLLECTOR
cd Des../R../R../f..

onos-app 172.17.0.2 reinstall! target/FlowCollector-1.0-SNAPSHOT.oar
sudo bash
gradle execute

wget 10.0.0.1




ESCENARIO PRUEBAS
server 1,2
normal 5-1, 6-1
ataque 5-1 (otra terminal)

probar comandos iperf
comprobar que hay flujo,
se bloquea el 5, el 6 sigue funcionando



ONOS install


https://github.com/jatj/sdn_onos/blob/master/INSTALL.md

Install Docker
Login to the mininet VM with a user with super user permissions and run the following commands to install docker.

sudo apt-get update Downloads the packages lists from the repositories
sudo apt-get -y install docker.io Install the docker.io package
sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker Creates a symlink from where the docker io package files where installed to the directory /usr/local/bin/docker, so a linux user can run the docker cli by just running docker.


Run Docker image

Download the onos image using sudo docker pull onosproject/onos.
You can also use an specific release version with :VERSION_NUMBER, e.g. sudo docker pull onosproject/onos:2.1.0

Run a single instance of ONOS>

 sudo docker run -t -d -p 8181:8181 -p 8101:8101 -p 5005:5005 -p 830:830 --name onos onosproject/onos

The previous command is configured with the following options:

-t will allocate a pseudo-tty to the container
-d will run the container in foreground
-p <CONTAINER_PORT>:<HOST_PORT> Publish a CONTAINER_PORT to a HOST_PORT. Some of the ports that ONOS uses:
8181 for REST API and GUI
8101 to access the ONOS CLI
9876 for intra-cluster communication (communication between target machines)
6653 for OpenFlow
6640 for OVSDB
830 for NETCONF
5005 for debugging, a java debugger can be attached to this port
So with the previous command we are publishing the ONOS CLI, GUI, NETCONF, and Debugger ports.


Access Onos UI

wget -O - http://localhost:8181/onos/ui > /dev/null


// Attacks slow read

slowhttptest -c 10000 -X -r 300  -w 1 -y 1 -n 1 -z 5 -u http://localhost:8080/ -p 5 -l 350


// commands
sudo netstat -tulpn | grep :80
$ sudo systemctl start apache2
$ sudo systemctl status apache2

// install dockers needed to run tests
sudo docker build -t my-ubuntu .
sudo docker images
sudo docker image rm my-ubuntu

// onos intents
add-host-intent --key "intent1" --ethSrc "00:00:00:00:00:03" --ethDst "8A:62:F9:EF:96:00"  "00:00:00:00:00:03/None" "8A:62:F9:EF:96:00/None" 

add-host-intent --key "intent1" --ethSrc "00:00:00:00:00:03" --ethDst "96:D5:D6:10:CA:DD"  "00:00:00:00:00:03/None" "8A:62:F9:EF:96:00/None"

# worked it changed the Dest IP
add-host-intent --key "intent1" --setEthDst "AA:45:D9:5C:62:6A" "00:00:00:00:00:03/None" "86:AB:AB:70:7B:E2/None"

add-host-intent --key "intent2" --setEthSrc "96:D5:D6:10:CA:DD" --setEthDst "00:00:00:00:00:03" "00:00:00:00:00:03/None" "8A:62:F9:EF:96:00/None"




did not worked Try with reactive fwd

// remove intents
intents
remove-intent --purge "org.onosproject.cli" "intent1"
remove-intent --purge "org.onosproject.cli" "intent2"
 
 iperf -s
 iperf -c 10.0.0.%s -t 800 -b 1M
